__config() -> 
(
	return(
		m(
			l('scope','global'),
			l('stay_loaded',true);
		);
	);
	global_appname = 'blockPos';
);

__initialize(appname) -> (
	data = read_file(appname + '_blocks','nbt');
	if(data == null,
		__save_blocks(appname,l());
		print(appname + ' nbt file created');
	);
);

__load_blocks(appname) ->
(
	return(parse_nbt(read_file(appname + '_blocks','nbt')));
);

__save_blocks(appname,data) ->
(
	write_file(appname + '_blocks','nbt',encode_nbt(data));
);

__find(container,type,values) ->
(
	if(type == 'pos' && length(values) != 3,
		print('to match a position, the third argument of find() must be a triple');
		return(l()),
		
		type == 'tags' && length(values) < 2,
		print('to match a tag, the third argument of find() must have at least two elements');
		return(l()),
		
		type == 'tags' && values:'mode' == null,
		print('to match a tag, the third argument of find() must have \'mode\' as a key');
		return(l());
	);
	data = l();
	if(type == 'pos',
		data = filter(container,
			_:'pos' == values
		);
		return(data),
		
		
		type == 'tags' && length(values) > 1,
		mode = values:'mode';
		delete(values,'mode');
		
		if(mode == 'all',
			data = filter(container,
				tags = _:'tags';
				all(keys(values),
					tags:_ == values:_;
				);
			);
			return(data),
				
			mode == 'any',
			data = filter(container,
				tags = _:'tags';
				first(keys(values),
					tags:_ == values:_;
				);
			);
			return(data);
		);
	);
);

__add(container,pos,tags) ->
(
	container +=
		m(
			l(
				'pos',
				pos
			),
			l(
				'tags',
				tags
			)
		);
);

__delete_value(container,pos,tags) ->
(
	flag = false;
	
	result = first(container,
		element = _i;
		_ == m(l('pos',pos),l('tags',tags));
	);
	if(result,
		flag = delete(container,element);
	);
	return(flag);
);


__find_blocks(appname,type,values) ->
(
	data = __load_blocks(appname);
	return(find(data,type,values));
);

__add_block(appname,pos,tags) ->
(
	data = __load_blocks(appname);
	__add(data,pos,tags);
	__save_blocks(appname,data);
);

__delete_block(appname,pos,tags) ->
(
	data = __load_blocks(appname);
	__delete_value(appname,data,pos,tags);
	__save_blocks(appname,data);
);

__clear_all(appname) ->
(
	__save_blocks(appname,l());
);
